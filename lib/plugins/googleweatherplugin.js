// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.GoogleWeatherPlugin = (function(_super) {

    __extends(GoogleWeatherPlugin, _super);

    function GoogleWeatherPlugin() {
      return GoogleWeatherPlugin.__super__.constructor.apply(this, arguments);
    }

    GoogleWeatherPlugin.prototype.init = function() {
      var annotation, _i, _len, _ref, _results,
        _this = this;
      this.name = 'GoogleWeatherPlugin';
      annotation = void 0;
      console.info("Initialize GoogleWeatherPlugin");
      _ref = this.lime.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        jQuery(annotation).bind("becomeActive", function(e) {
          annotation = e.target;
          if (annotation.resource.value.indexOf("geonames") > 0 && annotation.resource.value.indexOf("about.rdf") < 0) {
            return annotation.entityPromise.done(function(entity) {
              var widget;
              widget = _this.lime.allocateWidgetSpace(_this, {
                thumbnail: "img/weather.png",
                title: "" + (annotation.getLabel()) + " Weather"
              });
              if (widget) {
                widget.annotation = annotation;
                widget.show();
                jQuery(widget).bind('activate', function(e) {
                  annotation = e.target.annotation;
                  return _this.displayModal(annotation);
                });
              }
              return annotation.widgets[_this.name] = widget;
            });
          }
        });
        _results.push(jQuery(annotation).bind("becomeInactive", function(e) {
          var widget;
          annotation = e.target;
          widget = annotation.widgets[_this.name];
          if (widget) {
            widget.deactivate();
          }
        }));
      }
      return _results;
    };

    GoogleWeatherPlugin.prototype.showWeatherInModalWindow = function(annotation, outputElement) {
      var i, latitude, latlng, locationName, longitude, map, myOptions, output, weatherLayer, x, xmlDoc, xmlhttp;
      try {
        if (window.XMLHttpRequest) {
          xmlhttp = new XMLHttpRequest();
        } else {
          xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xmlhttp.open("POST", annotation.resource.value + "/about.rdf", false);
        xmlhttp.send();
        xmlDoc = xmlhttp.responseXML;
        x = xmlDoc.getElementsByTagName("Feature");
        i = 0;
        while (i < x.length) {
          locationName = x[i].getElementsByTagName("name")[0].childNodes[0].nodeValue;
          latitude = x[i].getElementsByTagName("lat")[0].childNodes[0].nodeValue;
          longitude = x[i].getElementsByTagName("long")[0].childNodes[0].nodeValue;
          i++;
        }
      } catch (_error) {}
      output = document.getElementById(outputElement);
      latlng = new google.maps.LatLng(latitude, longitude);
      myOptions = {
        zoom: 11,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      map = new google.maps.Map(output, myOptions);
      weatherLayer = new google.maps.weather.WeatherLayer({
        temperatureUnits: google.maps.weather.TemperatureUnit.CELSIUS
      });
      return weatherLayer.setMap(map);
    };

    GoogleWeatherPlugin.prototype.displayModal = function(annotation) {
      var mask, maskHeight, maskWidth, modalcontainer, winH, winW,
        _this = this;
      if (this.lime.player.isFullScreen) {
        modalcontainer = $(".modalwindow");
      } else {
        modalcontainer = $("#modalWindow");
      }
      mask = void 0;
      if (this.lime.player.isFullScreen) {
        mask = $(".mask");
      } else {
        mask = $("#mask");
      }
      $(modalcontainer).css("height", "70%");
      $(modalcontainer).css("max-height", "1200px");
      $(modalcontainer).empty();
      $(modalcontainer).append("<a href=\"#\" class=\"close\" role=\"button\"><img src=\"img/close-icon.png\" style=\"width: 22px; height: 22px;\"/></a>");
      $(modalcontainer).append("<div id=\"modalContent\" style=\"height: 95%; width: 100%; position: relative; margin: 0 auto; color: black; \"> &nbsp");
      $(modalcontainer).append("</div>");
      maskHeight = $(window).height();
      maskWidth = $(window).width();
      $(mask).css({
        width: maskWidth,
        height: maskHeight
      });
      $(mask).fadeIn(100);
      $(mask).fadeTo("fast", 0.8);
      winH = $(window).height();
      winW = $(window).width();
      $(modalcontainer).css("top", winH / 2 - $(modalcontainer).height() / 2);
      $(modalcontainer).css("left", winW / 2 - $(modalcontainer).width() / 2);
      $(modalcontainer).fadeIn(100);
      $(".close").click(function(e) {
        e.preventDefault();
        $(mask).hide();
        return $(modalcontainer).hide();
      });
      $(mask).click(function(e) {
        $(mask).hide();
        return $(modalcontainer).hide();
      });
      $(window).resize(function(e) {
        maskHeight = $(document).height();
        maskWidth = $(document).width();
        $(mask).css({
          width: maskWidth,
          height: maskHeight
        });
        winH = $(window).height();
        winW = $(window).width();
        $(modalcontainer).css("top", winH / 2 - $(modalcontainer).height() / 2);
        return $(modalcontainer).css("left", winW / 2 - $(modalcontainer).width() / 2);
      });
      return this.showWeatherInModalWindow(annotation, "modalContent");
    };

    return GoogleWeatherPlugin;

  })(window.LimePlugin);

}).call(this);
